//
// ../Plugins/Experimental/LearningAgents/Intermediate/Build/Win64/x64/UnrealEditor/Development/Learning/Learning.ispc.generated.dummy_sse4.h
// (Header automatically generated by the ispc compiler.)
// DO NOT EDIT THIS FILE.
//

#pragma once
#include <stdint.h>



#ifdef __cplusplus
namespace ispc { /* namespace */
#endif // __cplusplus

#ifndef __ISPC_ALIGN__
#if defined(__clang__) || !defined(_MSC_VER)
// Clang, GCC, ICC
#define __ISPC_ALIGN__(s) __attribute__((aligned(s)))
#define __ISPC_ALIGNED_STRUCT__(s) struct __ISPC_ALIGN__(s)
#else
// Visual Studio
#define __ISPC_ALIGN__(s) __declspec(align(s))
#define __ISPC_ALIGNED_STRUCT__(s) __ISPC_ALIGN__(s) struct
#endif
#endif


///////////////////////////////////////////////////////////////////////////
// Functions exported from ispc code
///////////////////////////////////////////////////////////////////////////
#if defined(__cplusplus) && (! defined(__ISPC_NO_EXTERN_C) || !__ISPC_NO_EXTERN_C )
extern "C" {
#endif // __cplusplus
    extern void LearningAdjustCMAMean(float * InOutMean, float * InOutOldMean, const float * Weights, const int32_t * LossRanking, const float * Samples, const int32_t Mu, const int32_t DimNum);
    extern void LearningCombineFeature(float * Output, const float * Buffer, const int32_t DimOffset, const int32_t DimNum, const int32_t OutputDimNum, const int32_t InstanceNum, const float Scale);
    extern void LearningCombineFeatureSingleInstance(float * Output, const float * Buffer, const int32_t DimOffset, const int32_t DimNum, const float Scale);
    extern void LearningComputeCMAUpdateDirection(float * OutUpdateDirection, const float * Mean, const float * OldMean, const float * CovarianceInverseSqrt, const int32_t DimNum);
    extern void LearningEstimateGradient(float * OutGradient, const float * Samples, const float * Losses, const int32_t SampleNum, const int32_t DimNum);
    extern void LearningKMeansComputeClusteredIndex(float * OutClusteredSamples, int32_t * OutClusterStarts, int32_t * OutClusterLengths, int32_t * OutSampleMapping, int32_t * OutInverseSampleMapping, const int32_t * Assignments, const int32_t * AssignmentCounts, const float * Samples, const int32_t SampleNum, const int32_t ClusterNum, const int32_t DimNum);
    extern void LearningKMeansInitBounds(float * OutMins, float * OutMaxs, const float * Samples, const int32_t SampleNum, const int32_t ClusterNum, const int32_t DimNum, const uint32_t Seed);
    extern void LearningKMeansInitCenters(float * OutCenters, const float * Samples, const int32_t SampleNum, const int32_t ClusterNum, const int32_t DimNum, const uint32_t Seed);
    extern void LearningKMeansUpdateAssignmentsFromBounds(int32_t * OutAssignments, const float * Mins, const float * Maxs, const float * Samples, const int32_t SampleNum, const int32_t ClusterNum, const int32_t DimNum);
    extern void LearningKMeansUpdateAssignmentsFromCenters(int32_t * OutAssignments, const float * Centers, const float * Samples, const int32_t SampleNum, const int32_t ClusterNum, const int32_t DimNum);
    extern void LearningKMeansUpdateBounds(float * OutMins, float * OutMaxs, const int32_t * Assignments, const float * Samples, const int32_t SampleNum, const int32_t ClusterNum, const int32_t DimNum);
    extern void LearningKMeansUpdateCenters(float * OutCenters, const int32_t * Assignments, const int32_t * AssignmentCounts, const float * Samples, const int32_t SampleNum, const int32_t ClusterNum, const int32_t DimNum);
    extern void LearningLayerActionNoise(float * Output, float * OutputMean, float * OutputStd, const float * Input, const uint32_t * Seed, const float * ActionNoiseScale, const int32_t BatchNum, const int32_t InputNum, const int32_t OutputNum, const float LogActionNoiseMin, const float LogActionNoiseMax);
    extern void LearningLayerActionNoiseSingleBatch(float * Output, float * OutputMean, float * OutputStd, const float * Input, const uint32_t Seed, const float ActionNoiseScale, const int32_t OutputNum, const float LogActionNoiseMin, const float LogActionNoiseMax);
    extern void LearningLayerELU(float * InputOutput, const int32_t Num);
    extern void LearningLayerMatMulPlusBias(float * Output, const float * Input, const float * Weights, const float * Biases, const int32_t BatchNum, const int32_t RowNum, const int32_t ColNum);
    extern void LearningLayerMatMulVecPlusBias(float * Output, const float * Input, const float * Weights, const float * Biases, const int32_t RowNum, const int32_t ColNum);
    extern void LearningLayerReLU(float * InputOutput, const int32_t Num);
    extern void LearningLayerTanH(float * InputOutput, const int32_t Num);
    extern void LearningRandomFloatArray(float * Output, const int32_t DimNum, const uint32_t State);
    extern void LearningRandomGaussianArray(float * Output, const int32_t DimNum, const uint32_t State, const float Mean, const float Std);
    extern void LearningRandomIntArray(uint32_t * Output, const int32_t DimNum, const uint32_t State);
    extern void LearningRandomUniformArray(float * Output, const int32_t DimNum, const uint32_t State, const float Min, const float Max);
    extern void LearningResampleStateArray(uint32_t * States, const int32_t DimNum);
    extern void LearningSampleAdamOptimizer(float * OutSamples, const float * GaussianSamples, const float * Estimate, const float FiniteDifferenceStd, const int32_t SampleNum, const int32_t DimNum);
    extern void LearningSeparateFeature(float * Buffer, const float * Input, const int32_t DimOffset, const int32_t DimNum, const int32_t OutputDimNum, const int32_t InstanceNum, const float Scale, const float Epsilon);
    extern void LearningSeparateFeatureSingleInstance(float * Buffer, const float * Input, const int32_t DimOffset, const int32_t DimNum, const float Scale, const float Epsilon);
    extern void LearningTransformCMASamples(float * Output, const float * Samples, const float * Mean, const float * Covariance, const int32_t SampleNum, const int32_t DimNum, const float Sigma);
    extern void LearningUpdateAdamEstimate(int32_t * InOutIterations, float * InOutEstimate, float * InOutM0, float * InOutM1, float * InOutM1HatMax, const float * Gradient, const float LearningRate, const float Beta1, const float Beta2, const int32_t DimNum);
    extern void LearningUpdateCMACovariance(float * InOutCovariance, const float * PathCovariance, const float Scale, const float C1, const int32_t DimNum);
    extern void LearningUpdatePSOBest(float &InOutBestGlobalLoss, float * InOutGlobalBestPosition, float * InOutLocalBestLoss, float * InOutLocalBestPositions, const float * Losses, const float * Samples, const int32_t SampleNum, const int32_t DimNum);
    extern void LearningUpdatePSOSamples(float * InOutSamples, const float * Velocities, const int32_t SampleNum, const int32_t DimNum);
    extern void LearningUpdatePSOVelocitiesSamples(float * InOutVelocities, float * InOutSamples, const float * UniformSamplesLocal, const float * UniformSamplesGlobal, const float * LocalBestPositions, const float * GlobalBestPosition, const int32_t SampleNum, const int32_t DimNum, const float Momentum, const float LocalGain, const float GlobalGain);
#if defined(__cplusplus) && (! defined(__ISPC_NO_EXTERN_C) || !__ISPC_NO_EXTERN_C )
} /* end extern C */
#endif // __cplusplus


#ifdef __cplusplus
} /* namespace */
#endif // __cplusplus
